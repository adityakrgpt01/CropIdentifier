# -*- coding: utf-8 -*-
"""IPEC

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15hEyU1MFpYTwFEUrSSOTsJzIK4i-wr8X
"""

from google.colab import drive
drive.mount('/content/gdrive')

!unzip -q "/content/gdrive/My Drive/output.zip"

import keras
from keras.models import Sequential
from keras.layers import Convolution2D
from keras.layers import MaxPool2D
from keras.layers import Flatten
from keras.layers import Dense

base_model=keras.applications.mobilenet.MobileNet(input_shape=None, alpha=1.0, depth_multiplier=1, dropout=1e-3, include_top=True, weights='imagenet', input_tensor=None, pooling=None, classes=1000)



base_model.summary()

from keras.layers import Dropout , GlobalAveragePooling2D

x= base_model.layers[-2].output
x= Dropout(0.5)(x)
preds=Dense(10,activation='softmax')(x)

from keras.models import Model

model_final = Model(input = base_model.input, output = preds)

model_final.summary()

for i,layer in enumerate(model_final.layers):
  print(i,layer.name)
  
# for layers in (model_final.layers)[:312]:
#     print(layers)
#     layers.trainable = False

model_final.summary()    
    
from keras.optimizers import Adam
opt = Adam(lr=0.0001)

model_final.compile(optimizer=opt,loss="categorical_crossentropy",metrics=["accuracy"])

from keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(
        rescale=1./255,
        shear_range=0.2,
        zoom_range=0.2,
        horizontal_flip=True)

training_set = train_datagen.flow_from_directory(
        '/content/output/train',
        target_size=(224, 224),
        batch_size=40)

test_datagen = ImageDataGenerator(rescale=1./255)

test_set = test_datagen.flow_from_directory(
        '/content/output/val',
        target_size=(224,224),
        batch_size=40)

from keras.callbacks import ModelCheckpoint, EarlyStopping
path = F"/content/gdrive/My Drive/ipec_mobilenet_2.0.h5"
checkpoint = ModelCheckpoint(path, monitor='val_acc', verbose=1, save_best_only=True, save_weights_only=False, mode='auto', period=1)

model_final.fit_generator(
        training_set,
        steps_per_epoch=181,
        epochs=10,
        validation_data=test_set,
        validation_steps=46,callbacks=[checkpoint])

#Conversion in tflite
import tensorflow as tf
converter = tf.lite.TFLiteConverter.from_keras_model_file( F"/content/gdrive/My Drive/ipec_mobilenet_2.0.h5" )
model = converter.convert()
file = open( 'n2.tflite' , 'wb' )
file.write( model )